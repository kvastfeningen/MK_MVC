

Diverse kod till LanguageController

 //var viewModel = new ShowLanguageViewModel();
          //  viewModel.Languages = _context.Languages
          //      .Include(pl => pl.PersonLanguages.Select(p => p.PersonId))
           //     .OrderBy(i => i.LanguageName);


 // ViewBag.PersonID = PersonLanguage.PersonID;
            // viewModel.Enrollments = viewModel.Courses.Where(
            //    x => x.CourseID == courseID).Single().Enrollments;


/*
            List<Language> listOfLanguages = _context.Languages
                .Include(pl => pl.PersonLanguages)
                .ToList();
            */
            //List<PersonLanguage> listOfPersonLanguages = _context.PersonLanguages.Include(p => p.People).ToList();
            //List<Person> listOfPersonLanguages = _context.People.Include(p => p.PersonLanguages).ToList();

            //return View(listOfLanguages);



 var viewModel = (from a in _context.PersonLanguages
                        join b in _context.Languages on a.LanguageId equals b.LanguageId
                        join c in _context.People on a.PersonId equals c.PersonId
                        select new ShowLanguageViewModel
                        {
                            Language = b.LanguageName,  
                            Name = c.Name,
                           
                        }).ToList();
           

 <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>  </td>
                <td>
                    @foreach (var lang in Model.Where(n => n.Name == item.Name))
                    {
                        l = "";
                        l = l + lang.Language + " | ";
                    }
                    @l
                </td>

               
            </tr>
        }
    </tbody>


/*
            var vm = new ShowPersonViewModel();
            vm.Languages = _context.Languages
                .Include(pl => pl.PersonLanguages.Select(i => i.PersonId))
                .Include(p => p.PersonLanguages);
            
            return View(vm); 
            */
            //var p = _context.People.Include(pl => pl.PersonLanguages).Where(s => s.PersonId.Contains(s.PersonId)).ToList();
            /*
            var viewModel = (from a in _context.PersonLanguages
                             join b in _context.Languages on a.LanguageId equals b.LanguageId
                             join c in _context.People on a.PersonId equals c.PersonId
                             select new ShowPersonViewModel
                             {
                                 Name = c.Name,
                                 Language = b.LanguageName,
                                 

                             }).ToList();
            */
            /*
                         List < Language > listOfLanguages = _context.Languages
                 .Include(pl => pl.PersonLanguages)
                 .ToList();
               */



 <tbody>
        @foreach (var item in Model)
        {
            <tr>
                @foreach (var item in Model?.AllLanguages)
                {

                    <partial name="_Person2" model="item" />
                }
            </tr>
            </tr>
        }
    </tbody>


<td>
                    @foreach (var pers in Model.Where(x => x.Language == item.Language))
                    {
                        l = l + pers.Name + " | ";
                    }
                    @l
                </td>